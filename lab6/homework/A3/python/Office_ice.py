# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `Office.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Office
_M_Office = Ice.openModule('Office')
__name__ = 'Office'

if 'Result' not in _M_Office.__dict__:
    _M_Office.Result = Ice.createTempClass()
    class Result(object):
        def __init__(self, positive=False, id=0, timeElapsed=0):
            self.positive = positive
            self.id = id
            self.timeElapsed = timeElapsed

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.positive)
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.timeElapsed)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Office.Result):
                return NotImplemented
            else:
                if self.positive is None or other.positive is None:
                    if self.positive != other.positive:
                        return (-1 if self.positive is None else 1)
                else:
                    if self.positive < other.positive:
                        return -1
                    elif self.positive > other.positive:
                        return 1
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.timeElapsed is None or other.timeElapsed is None:
                    if self.timeElapsed != other.timeElapsed:
                        return (-1 if self.timeElapsed is None else 1)
                else:
                    if self.timeElapsed < other.timeElapsed:
                        return -1
                    elif self.timeElapsed > other.timeElapsed:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Office._t_Result)

        __repr__ = __str__

    _M_Office._t_Result = IcePy.defineStruct('::Office::Result', Result, (), (
        ('positive', (), IcePy._t_bool),
        ('id', (), IcePy._t_int),
        ('timeElapsed', (), IcePy._t_long)
    ))

    _M_Office.Result = Result
    del Result

_M_Office._t_OfficeListener = IcePy.defineValue('::Office::OfficeListener', Ice.Value, -1, (), False, True, None, ())

if 'OfficeListenerPrx' not in _M_Office.__dict__:
    _M_Office.OfficeListenerPrx = Ice.createTempClass()
    class OfficeListenerPrx(Ice.ObjectPrx):

        def notify(self, result, context=None):
            return _M_Office.OfficeListener._op_notify.invoke(self, ((result, ), context))

        def notifyAsync(self, result, context=None):
            return _M_Office.OfficeListener._op_notify.invokeAsync(self, ((result, ), context))

        def begin_notify(self, result, _response=None, _ex=None, _sent=None, context=None):
            return _M_Office.OfficeListener._op_notify.begin(self, ((result, ), _response, _ex, _sent, context))

        def end_notify(self, _r):
            return _M_Office.OfficeListener._op_notify.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Office.OfficeListenerPrx.ice_checkedCast(proxy, '::Office::OfficeListener', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Office.OfficeListenerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Office::OfficeListener'
    _M_Office._t_OfficeListenerPrx = IcePy.defineProxy('::Office::OfficeListener', OfficeListenerPrx)

    _M_Office.OfficeListenerPrx = OfficeListenerPrx
    del OfficeListenerPrx

    _M_Office.OfficeListener = Ice.createTempClass()
    class OfficeListener(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Office::OfficeListener')

        def ice_id(self, current=None):
            return '::Office::OfficeListener'

        @staticmethod
        def ice_staticId():
            return '::Office::OfficeListener'

        def notify(self, result, current=None):
            raise NotImplementedError("servant method 'notify' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Office._t_OfficeListenerDisp)

        __repr__ = __str__

    _M_Office._t_OfficeListenerDisp = IcePy.defineClass('::Office::OfficeListener', OfficeListener, (), None, ())
    OfficeListener._ice_type = _M_Office._t_OfficeListenerDisp

    OfficeListener._op_notify = IcePy.Operation('notify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Office._t_Result, False, 0),), (), ((), IcePy._t_bool, False, 0), ())

    _M_Office.OfficeListener = OfficeListener
    del OfficeListener

if 'DrivingLicenseType' not in _M_Office.__dict__:
    _M_Office.DrivingLicenseType = Ice.createTempClass()
    class DrivingLicenseType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DrivingLicenseType.B2 = DrivingLicenseType("B2", 0)
    DrivingLicenseType.B1 = DrivingLicenseType("B1", 1)
    DrivingLicenseType.C = DrivingLicenseType("C", 2)
    DrivingLicenseType.E = DrivingLicenseType("E", 3)
    DrivingLicenseType._enumerators = { 0:DrivingLicenseType.B2, 1:DrivingLicenseType.B1, 2:DrivingLicenseType.C, 3:DrivingLicenseType.E }

    _M_Office._t_DrivingLicenseType = IcePy.defineEnum('::Office::DrivingLicenseType', DrivingLicenseType, (), DrivingLicenseType._enumerators)

    _M_Office.DrivingLicenseType = DrivingLicenseType
    del DrivingLicenseType

_M_Office._t_OfficeProvider = IcePy.defineValue('::Office::OfficeProvider', Ice.Value, -1, (), False, True, None, ())

if 'OfficeProviderPrx' not in _M_Office.__dict__:
    _M_Office.OfficeProviderPrx = Ice.createTempClass()
    class OfficeProviderPrx(Ice.ObjectPrx):

        def getDrivingLicense(self, who, DrivingType, examResult, context=None):
            return _M_Office.OfficeProvider._op_getDrivingLicense.invoke(self, ((who, DrivingType, examResult), context))

        def getDrivingLicenseAsync(self, who, DrivingType, examResult, context=None):
            return _M_Office.OfficeProvider._op_getDrivingLicense.invokeAsync(self, ((who, DrivingType, examResult), context))

        def begin_getDrivingLicense(self, who, DrivingType, examResult, _response=None, _ex=None, _sent=None, context=None):
            return _M_Office.OfficeProvider._op_getDrivingLicense.begin(self, ((who, DrivingType, examResult), _response, _ex, _sent, context))

        def end_getDrivingLicense(self, _r):
            return _M_Office.OfficeProvider._op_getDrivingLicense.end(self, _r)

        def getZUSInfo(self, who, nip, context=None):
            return _M_Office.OfficeProvider._op_getZUSInfo.invoke(self, ((who, nip), context))

        def getZUSInfoAsync(self, who, nip, context=None):
            return _M_Office.OfficeProvider._op_getZUSInfo.invokeAsync(self, ((who, nip), context))

        def begin_getZUSInfo(self, who, nip, _response=None, _ex=None, _sent=None, context=None):
            return _M_Office.OfficeProvider._op_getZUSInfo.begin(self, ((who, nip), _response, _ex, _sent, context))

        def end_getZUSInfo(self, _r):
            return _M_Office.OfficeProvider._op_getZUSInfo.end(self, _r)

        def getBuildingPermit(self, who, where, size, context=None):
            return _M_Office.OfficeProvider._op_getBuildingPermit.invoke(self, ((who, where, size), context))

        def getBuildingPermitAsync(self, who, where, size, context=None):
            return _M_Office.OfficeProvider._op_getBuildingPermit.invokeAsync(self, ((who, where, size), context))

        def begin_getBuildingPermit(self, who, where, size, _response=None, _ex=None, _sent=None, context=None):
            return _M_Office.OfficeProvider._op_getBuildingPermit.begin(self, ((who, where, size), _response, _ex, _sent, context))

        def end_getBuildingPermit(self, _r):
            return _M_Office.OfficeProvider._op_getBuildingPermit.end(self, _r)

        def listen(self, who, officeListener, context=None):
            return _M_Office.OfficeProvider._op_listen.invoke(self, ((who, officeListener), context))

        def listenAsync(self, who, officeListener, context=None):
            return _M_Office.OfficeProvider._op_listen.invokeAsync(self, ((who, officeListener), context))

        def begin_listen(self, who, officeListener, _response=None, _ex=None, _sent=None, context=None):
            return _M_Office.OfficeProvider._op_listen.begin(self, ((who, officeListener), _response, _ex, _sent, context))

        def end_listen(self, _r):
            return _M_Office.OfficeProvider._op_listen.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Office.OfficeProviderPrx.ice_checkedCast(proxy, '::Office::OfficeProvider', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Office.OfficeProviderPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Office::OfficeProvider'
    _M_Office._t_OfficeProviderPrx = IcePy.defineProxy('::Office::OfficeProvider', OfficeProviderPrx)

    _M_Office.OfficeProviderPrx = OfficeProviderPrx
    del OfficeProviderPrx

    _M_Office.OfficeProvider = Ice.createTempClass()
    class OfficeProvider(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Office::OfficeProvider')

        def ice_id(self, current=None):
            return '::Office::OfficeProvider'

        @staticmethod
        def ice_staticId():
            return '::Office::OfficeProvider'

        def getDrivingLicense(self, who, DrivingType, examResult, current=None):
            raise NotImplementedError("servant method 'getDrivingLicense' not implemented")

        def getZUSInfo(self, who, nip, current=None):
            raise NotImplementedError("servant method 'getZUSInfo' not implemented")

        def getBuildingPermit(self, who, where, size, current=None):
            raise NotImplementedError("servant method 'getBuildingPermit' not implemented")

        def listen(self, who, officeListener, current=None):
            raise NotImplementedError("servant method 'listen' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Office._t_OfficeProviderDisp)

        __repr__ = __str__

    _M_Office._t_OfficeProviderDisp = IcePy.defineClass('::Office::OfficeProvider', OfficeProvider, (), None, ())
    OfficeProvider._ice_type = _M_Office._t_OfficeProviderDisp

    OfficeProvider._op_getDrivingLicense = IcePy.Operation('getDrivingLicense', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Office._t_DrivingLicenseType, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    OfficeProvider._op_getZUSInfo = IcePy.Operation('getZUSInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    OfficeProvider._op_getBuildingPermit = IcePy.Operation('getBuildingPermit', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    OfficeProvider._op_listen = IcePy.Operation('listen', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Office._t_OfficeListenerPrx, False, 0)), (), None, ())

    _M_Office.OfficeProvider = OfficeProvider
    del OfficeProvider

# End of module Office
